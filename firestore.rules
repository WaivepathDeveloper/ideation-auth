rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ===== HELPER FUNCTIONS =====
    function isAuthenticated() {
      return request.auth != null;
    }

    function getTenantId() {
      return request.auth.token.tenant_id;
    }

    function belongsToTenant(tenant_id) {
      return tenant_id == getTenantId();
    }

    // ===== ROLE HELPER FUNCTIONS (5-Role Hierarchy) =====
    function isOwner() {
      return request.auth != null
        && request.auth.token.role == 'owner';
    }

    function isAdmin() {
      return request.auth != null
        && request.auth.token.role == 'admin';
    }

    function isMember() {
      return request.auth != null
        && request.auth.token.role == 'member';
    }

    function isGuest() {
      return request.auth != null
        && request.auth.token.role == 'guest';
    }

    function isViewer() {
      return request.auth != null
        && request.auth.token.role == 'viewer';
    }

    function canManageUsers() {
      return isOwner() || isAdmin();
    }

    function canEditData() {
      return isOwner() || isAdmin() || isMember();
    }

    function hasResourceAccess(collection, docId) {
      return isGuest()
        && request.auth.token.resource_permissions != null
        && request.auth.token.resource_permissions[collection] != null
        && docId in request.auth.token.resource_permissions[collection];
    }

    // ===== USERS COLLECTION =====
    match /users/{userId} {
      // Rule 1: Users can ALWAYS read their own document (works before custom claims are set)
      // This enables the signup flow where client waits for onUserCreate to complete
      allow read: if isAuthenticated() && request.auth.uid == userId;

      // Rule 2: Users can read other users' documents in their tenant (after custom claims exist)
      allow read: if isAuthenticated()
        && resource != null
        && belongsToTenant(resource.data.tenant_id);

      // Only Cloud Functions can create users
      allow create: if false;

      // Users can update own profile OR admin/owner can update any user in tenant
      // Role field changes ONLY via Cloud Functions (prevents tampering)
      allow update: if isAuthenticated()
        && belongsToTenant(resource.data.tenant_id)
        && belongsToTenant(request.resource.data.tenant_id)
        && (
          request.auth.uid == userId  // Users can update own profile
          || canManageUsers()         // Owner/Admin can update others
        )
        && request.resource.data.role == resource.data.role;  // Role changes via Cloud Function only

      // No direct deletes - only soft delete via update
      allow delete: if false;
    }

    // ===== TENANTS COLLECTION =====
    match /tenants/{tenantId} {
      // SECURITY: Read requires BOTH token validation AND document tenant_id validation
      // This provides defense-in-depth: even if one layer fails, the other protects
      allow read: if isAuthenticated()
        && getTenantId() == tenantId
        && resource.data.tenant_id == tenantId;  // Double validation: doc tenant_id must match doc ID

      // SECURITY: Update with comprehensive immutability checks
      // Prevents tenant_id tampering, owner_id tampering, and created_by tampering
      allow update: if isAuthenticated()
        && getTenantId() == tenantId
        && canManageUsers()  // Owner or Admin can update settings
        && resource.data.tenant_id == tenantId  // Current tenant_id must match doc ID
        && request.resource.data.tenant_id == tenantId  // New tenant_id must match doc ID
        && request.resource.data.tenant_id == resource.data.tenant_id  // tenant_id is IMMUTABLE
        && request.resource.data.created_by == resource.data.created_by  // created_by is IMMUTABLE
        && (!('owner_id' in request.resource.data) || request.resource.data.owner_id == resource.data.owner_id);  // owner_id is IMMUTABLE

      // Only Cloud Functions can create/delete tenants
      allow create, delete: if false;
    }

    // ===== INVITATIONS COLLECTION =====
    match /invitations/{inviteId} {
      // Admins/Owners can see all invitations for their tenant
      // Invited users can see their own invitation by email
      allow read: if isAuthenticated()
        && ((canManageUsers() && belongsToTenant(resource.data.tenant_id))
        || request.auth.token.email == resource.data.email);

      // Only admins/owners can create invitations
      allow create: if isAuthenticated()
        && canManageUsers()
        && request.resource.data.tenant_id == getTenantId();

      // Only Cloud Functions can update (mark as accepted)
      allow update: if false;

      // Only admins/owners can delete invitations
      allow delete: if isAuthenticated()
        && canManageUsers()
        && belongsToTenant(resource.data.tenant_id);
    }

    // ===== AUDIT LOGS COLLECTION =====
    match /audit_logs/{logId} {
      // Only admins/owners can read audit logs
      allow read: if isAuthenticated()
        && canManageUsers()
        && belongsToTenant(resource.data.tenant_id);

      // Only Cloud Functions can create audit logs
      allow create: if false;

      // Audit logs are immutable
      allow update, delete: if false;
    }

    // ===== RATE LIMITS COLLECTION =====
    match /rate_limits/{limitId} {
      // Only Cloud Functions can access rate limits
      allow read, write: if false;
    }

    // ===== SESSIONS COLLECTION (BFF Pattern) =====
    match /sessions/{sessionId} {
      // Only Cloud Functions and Firebase Admin SDK can access sessions
      // Client apps should NEVER access this collection directly
      // Sessions contain Firebase tokens and MUST remain server-side only
      allow read, write: if false;
    }

    // ===== BUSINESS DATA COLLECTIONS (Example: posts) =====
    match /posts/{postId} {
      // Read access: Owner/Admin/Member/Viewer can read all, Guest can read if permitted
      allow read: if isAuthenticated()
        && belongsToTenant(resource.data.tenant_id)
        && (
          canEditData()  // Owner, Admin, Member can read all
          || isViewer()  // Viewer can read all
          || hasResourceAccess('posts', postId)  // Guest can read if permitted
        );

      // Create: Only Owner, Admin, Member can create
      allow create: if isAuthenticated()
        && request.resource.data.tenant_id == getTenantId()
        && request.resource.data.created_by == request.auth.uid
        && canEditData();  // Only Owner, Admin, Member

      // Update: Only Owner, Admin, Member can update
      // Must be owner of document OR admin/owner
      allow update: if isAuthenticated()
        && belongsToTenant(resource.data.tenant_id)
        && belongsToTenant(request.resource.data.tenant_id)
        && canEditData()  // Only Owner, Admin, Member
        && (resource.data.created_by == request.auth.uid || canManageUsers());

      // Delete: Only Owner, Admin, Member can delete
      // Must be owner of document OR admin/owner
      allow delete: if isAuthenticated()
        && belongsToTenant(resource.data.tenant_id)
        && canEditData()  // Only Owner, Admin, Member
        && (resource.data.created_by == request.auth.uid || canManageUsers());
    }

    // ===== COLLECTION GROUP PATTERNS =====
    // Ensure any collection group queries also enforce tenant isolation
    match /{path=**}/comments/{commentId} {
      // Read access: Owner/Admin/Member/Viewer can read all, Guest can read if permitted
      allow read: if isAuthenticated()
        && belongsToTenant(resource.data.tenant_id)
        && (
          canEditData()
          || isViewer()
          || hasResourceAccess('comments', commentId)
        );

      // Create: Only Owner, Admin, Member can create
      allow create: if isAuthenticated()
        && request.resource.data.tenant_id == getTenantId()
        && request.resource.data.created_by == request.auth.uid
        && canEditData();

      // Update: Only Owner, Admin, Member can update
      allow update: if isAuthenticated()
        && belongsToTenant(resource.data.tenant_id)
        && belongsToTenant(request.resource.data.tenant_id)
        && canEditData()
        && (resource.data.created_by == request.auth.uid || canManageUsers());

      // Delete: Only Owner, Admin, Member can delete
      allow delete: if isAuthenticated()
        && belongsToTenant(resource.data.tenant_id)
        && canEditData()
        && (resource.data.created_by == request.auth.uid || canManageUsers());
    }
  }
}
