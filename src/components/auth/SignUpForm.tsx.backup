'use client';

/**
 * SignUpForm Component
 *
 * User registration with email/password or Google OAuth
 * Handles waiting for custom claims after signup
 */

import { useState } from 'react';
import Link from 'next/link';
import { useTenantAuth } from '@/contexts/TenantAuthContext';
import { signUpSchema } from '@/lib/validations/auth';
import { AuthCard } from './shared/AuthCard';
import { AuthField } from './shared/AuthField';
import { PasswordInput } from './shared/PasswordInput';
import { AuthButton } from './shared/AuthButton';
import { AuthDivider } from './shared/AuthDivider';
import { AuthAlert } from './shared/AuthAlert';

export function SignUpForm() {
  const { signUp, signInWithGoogle } = useTenantAuth();

  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [waitingForSetup, setWaitingForSetup] = useState(false);
  const [fieldErrors, setFieldErrors] = useState<Record<string, string>>({});

  const handleEmailSignUp = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setFieldErrors({});

    // Client-side validation with Zod
    const result = signUpSchema.safeParse({ email, password, confirmPassword });
    if (!result.success) {
      const errors = result.error.flatten().fieldErrors;
      setFieldErrors({
        email: errors.email?.[0] || '',
        password: errors.password?.[0] || '',
        confirmPassword: errors.confirmPassword?.[0] || '',
      });
      return;
    }

    setLoading(true);
    setWaitingForSetup(true);

    try {
      await signUp(email, password);

      // Success - middleware will handle redirect to dashboard
      // Force page refresh to trigger middleware
      window.location.href = '/dashboard';
    } catch (err) {
      console.error('Signup error:', err);
      const error = err as { message?: string };
      setError(error.message || 'Failed to create account');
    } finally {
      setLoading(false);
      setWaitingForSetup(false);
    }
  };

  const handleGoogleSignUp = async () => {
    setError(null);
    setLoading(true);
    setWaitingForSetup(true);

    try {
      await signInWithGoogle();

      // Success - middleware will handle redirect to dashboard
      // Force page refresh to trigger middleware
      window.location.href = '/dashboard';
    } catch (err) {
      console.error('Google signup error:', err);
      const error = err as { message?: string };
      setError(error.message || 'Failed to sign up with Google');
    } finally {
      setLoading(false);
      setWaitingForSetup(false);
    }
  };

  return (
    <AuthCard
      title="Create Account"
      footer={
        <p className="text-sm text-muted-foreground">
          Already have an account?{' '}
          <Link href="/login" className="text-primary hover:underline">
            Sign in
          </Link>
        </p>
      }
    >
      <form onSubmit={handleEmailSignUp} className="space-y-4">
        {error && <AuthAlert variant="error" message={error} />}

        {waitingForSetup && (
          <AuthAlert
            variant="info"
            message="Setting up your account... This may take a few seconds."
          />
        )}

        <AuthField
          label="Email"
          id="email"
          type="email"
          value={email}
          onChange={setEmail}
          error={fieldErrors.email}
          disabled={loading}
          required
          placeholder="you@example.com"
          autoComplete="email"
        />

        <PasswordInput
          label="Password"
          id="password"
          value={password}
          onChange={setPassword}
          error={fieldErrors.password}
          disabled={loading}
          required
          placeholder="At least 6 characters"
          autoComplete="new-password"
        />

        <PasswordInput
          label="Confirm Password"
          id="confirmPassword"
          value={confirmPassword}
          onChange={setConfirmPassword}
          error={fieldErrors.confirmPassword}
          disabled={loading}
          required
          placeholder="Repeat password"
          autoComplete="new-password"
        />

        <AuthButton type="submit" loading={loading}>
          {loading ? 'Creating account...' : 'Sign Up'}
        </AuthButton>
      </form>

      <AuthDivider />

      <AuthButton
        variant="outline"
        onClick={handleGoogleSignUp}
        disabled={loading}
        loading={loading}
        icon={
          <svg className="w-5 h-5" viewBox="0 0 24 24">
            <path
              fill="currentColor"
              d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
            />
            <path
              fill="currentColor"
              d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
            />
            <path
              fill="currentColor"
              d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
            />
            <path
              fill="currentColor"
              d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
            />
          </svg>
        }
      >
        {loading ? 'Signing up...' : 'Sign up with Google'}
      </AuthButton>
    </AuthCard>
  );
}
